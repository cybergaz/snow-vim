return {
    "ThePrimeagen/harpoon",
    event = { "BufReadPost", "BufNewFile" },
    dependencies = {
        "nvim-lua/plenary.nvim",
    },
    branch = "harpoon2",
    config = true,
    opts = function(_)
        require("harpoon"):setup({
            settings = {
                save_on_toggle = true,
                sync_on_ui_close = false,
            },
        })
    end,
    -- enabled = false,

    keys = {
        {
            "<leader>hh",
            function()
                require("harpoon"):list():add()
            end,
            desc = "Mark file with harpoon",
        },
        {
            "<leader>hr",
            function()
                require("harpoon"):list():remove()
            end,
            desc = "Remove harpoon marks",
        },
        {
            "<leader>hl",
            function()
                require("harpoon").ui:toggle_quick_menu(require("harpoon"):list())
            end,
            desc = "Harpoon List",
        },
        {
            "<A-h>",
            function()
                require("harpoon"):list():prev({ ui_nav_wrap = true })
            end,
        },
        {
            "<A-l>",
            function()
                require("harpoon"):list():next({ ui_nav_wrap = true })
            end,
        },
        {
            "<leader>1",
            function()
                require("harpoon"):list():select(1)
            end,
            desc = "Switch to harpoon 1",
        },
        {
            "<leader>2",
            function()
                require("harpoon"):list():select(2)
            end,
            desc = "Switch to harpoon 2",
        },
        {
            "<leader>3",
            function()
                require("harpoon"):list():select(3)
            end,
            desc = "Switch to harpoon 3",
        },
        {
            "<leader>4",
            function()
                require("harpoon"):list():select(4)
            end,
            desc = "Switch to harpoon 4",
        },
        {
            "<leader>5",
            function()
                require("harpoon"):list():select(5)
            end,
            desc = "Switch to harpoon 5",
        },

        -- HARPOON 1 config
        --   { "<leader>a", "<cmd>lua require('harpoon.mark').add_file()<cr>", desc = "Mark file with harpoon" },
        --   { "<leader>hh", "<cmd>lua require('harpoon.mark').add_file()<cr>", desc = "Mark file with harpoon" },
        --   { "<leader>hr", "<cmd>lua require('harpoon.mark').rm_file()<cr>", desc = "Remove harpoon marks" },
        --   { "<leader>hl", "<cmd>lua require('harpoon.ui').toggle_quick_menu()<cr>", desc = "Show harpoon marks" },
        --   { "<S-l>", "<cmd>lua require('harpoon.ui').nav_next()<cr>", desc = "Go to next harpoon mark" },
        --   -- { "<C-l>", "<cmd>lua require('harpoon.ui').nav_next()<cr>", desc = "Go to next harpoon mark" },
        --   { "<S-h>", "<cmd>lua require('harpoon.ui').nav_prev()<cr>", desc = "Go to previous harpoon mark" },
        --   { "<leader>h1", "<cmd>lua require('harpoon.ui').nav_file(1)<cr>", desc = "harpoon file 1" },
        --   { "<leader>h2", "<cmd>lua require('harpoon.ui').nav_file(2)<cr>", desc = "harpoon file 2" },
        --   { "<leader>h3", "<cmd>lua require('harpoon.ui').nav_file(3)<cr>", desc = "harpoon file 3" },
        --   { "<leader>h4", "<cmd>lua require('harpoon.ui').nav_file(4)<cr>", desc = "harpoon file 4" },
        --   { "<leader>h5", "<cmd>lua require('harpoon.ui').nav_file(5)<cr>", desc = "harpoon file 5" },
    },
}



----------------------------------------------------------------------------------------
-- tokyonight theme configuration
----------------------------------------------------------------------------------------
{
  "folke/tokyonight.nvim",
  lazy = false,
  priority = 1000,
  opts = {
    style = "storm",

    transparent = true,

    styles = {
      comments = { italic = true },
      keywords = { italic = false },
      functions = { bold = true },
      variables = {},
      sidebars = "transparent",
      floats = "transparent",
    },
    hide_inactive_statusline = false,
    dim_inactive = false, -- dims inactive windows
    lualine_bold = false, -- When `true`, section headers in the lualine theme will be bold

    -- -----------------------------------------------------------------------------------
    on_colors = function(colors)
      -- colors.bg = "#24283b"
      -- colors.bg_dark = "#1f2335"
      -- colors.bg_float = "#1f2335"
      -- colors.bg_highlight = "#292e42"
      -- colors.bg_popup = "#1f2335"
      -- colors.bg_search = "#89ddff"
      -- colors.bg_sidebar = "#1f2335"
      -- colors.fg = "#c0caf5"
      -- colors.fg_dark = "#a9b1d6"
      -- colors.fg_float = "#c0caf5"
      -- colors.fg_gutter = "#3b4261"
      -- colors.fg_sidebar = "#a9b1d6"
      colors.bg_statusline = ""
      colors.border = "#1d202f"
      colors.border_highlight = "#29a4bd"
      colors.error = "#ff5370"
      colors.warning = "#ff9e64"

      colors.hint = "#1abc9c"
      colors.info = "#0db9d7"
      -- colors.bg_visual = "#2e3c64"

      colors.black = "#1d202f"
      colors.blue = "#7aa2ff"
      colors.blue0 = "#3d59a1"
      colors.blue1 = "#2ac3de"
      colors.blue2 = "#0db9d7"
      colors.blue5 = "#89ddff"
      colors.blue6 = "#b4f9f8"
      colors.blue7 = "#394b70"

      -- colors.cyan = "#7dcfff"
      colors.cyan = "#6a8ede"

      colors.dark3 = "#545c7e"
      colors.dark5 = "#737aa2"

      -- colors.green = "#00e08f"
      colors.green = "#27d696"
      colors.green1 = "#73daca"
      colors.green2 = "#41a6b5"
      colors.teal = "#1abc9c"

      colors.magenta = "#8f70f0"
      colors.magenta2 = "#ff007c"

      colors.purple = "#0f70f0"

      colors.orange = "#f76d47"
      colors.red = "#8f70F0"
      colors.red1 = "#db4b4b"

      colors.terminal_black = "#414868"
      colors.yellow = "#30a0c0"

      colors.gitSigns = {
        add = "#1adc9c",
        change = "#4b9be5",
        delete = "#bf555b",
      }
      colors.delta = {
        add = "#316172",
        delete = "#763842",
      }
      colors.diff = {
        add = "#283b4d",
        change = "#272d43",
        delete = "#3f2d3d",
        text = "#394b70",
      }
    end,
    -- -----------------------------------------------------------------------------------
    -- -----------------------------------------------------------------------------------
    on_highlights = function(hl, colors)
      -- local "" = ""

      hl.boolean = {
        -- fg = "#f76d47",
        fg = "#E32283",
        style = {},
      }
      hl.Constant = {
        fg = "#8f70f0",
        style = { italic = true },
      }
      -- hl.Variable = {
      --   fg = "#0000ff",
      --   style = {},
      -- }
      -- hl.string = {
      --   fg = "",
      --   style = {},
      -- }
      -- hl.Character = {
      --   fg = "#0000ff",
      -- }
      hl.number = {
        -- fg = "#f76d47",
        fg = "#E32283",
        style = {},
      }

      hl.Comment = {
        -- fg = "#60606f",
        fg = "#4a5266",
        style = {
          italic = true,
        },
      }

      hl.Keyword = {
        fg = "#4b9be5",
        style = {},
      }

      hl.namespace = {
        fg = "#0000ff",
        style = {},
      }

      hl.Operator = {
        fg = "#2050d0",
        style = {},
      }

      hl.Function = {
        -- fg = "#2fdfAf",
        fg = "#73baf5",
        style = { bold = true, italic = true },
      }

      -- hl.Hlargs = {
      --   fg = "#00ff00",
      -- }

      hl.Type = {
        fg = "#08afa3",
      }

      hl.LineNr = {
        fg = colors.dark3,
      }

      hl.CursorLineNr = {
        fg = "#2552ff",
      }

      hl.CursorLine = {
        bg = "",
      }

      hl.Title = {
        bold = true,
        fg = "#00f0ac",
      }

      hl.FlashLabel = {
        bg = "",
        bold = true,
        italic = true,
        fg = "#ff3689",
      }

      hl.FloatBorder = {
        bg = "",
        fg = "#035B78",
      }

      hl.IncSearch = {
        bg = "#f0f0f0",
        fg = "#1d202f",
      }
      hl.Search = {
        bg = "#70707f",
        fg = "#f2f2ff",
      }

      hl.DiagnosticError = {
        fg = "#ff5370",
      }

      hl.DiagnosticWarn = {
        fg = "#30a0c0",
      }

      hl.DiagnosticVirtualTextHint = {
        bg = "",
        fg = "#1abc9c",
      }

      hl.DiagnosticVirtualTextError = {
        bg = "",
        fg = "#ff5370",
      }

      hl.DiagnosticVirtualTextInfo = {
        bg = "",
        fg = "#0db9d7",
      }

      hl.DiagnosticVirtualTextWarn = {
        bg = "",
        fg = "#30a0c0",
      }

      hl.MatchParen = {
        bold = true,
        fg = "#2552ff",
      }

      -- Telescope colors --

      -- hl.TelescopeNormal = {
      --   bg = colors.bg_dark,
      --   fg = colors.fg_dark,
      -- }
      -- hl.TelescopeBorder = {
      --   bg = colors.bg_dark,
      --   fg = colors.bg_dark,
      -- }
      hl.TelescopePromptNormal = {
        bg = "",
      }
      hl.TelescopePromptBorder = {
        bg = "",
        fg = "",
      }
      hl.TelescopePromptTitle = {
        bg = "",
        fg = "",
      }
      -- hl.TelescopePreviewTitle = {
      --   bg = colors.bg_dark,
      --   fg = colors.bg_dark,
      -- }
      -- hl.TelescopeResultsTitle = {
      --   bg = colors.bg_dark,
      --   fg = colors.bg_dark,
      -- }
    end,
  },
},




-- -----------------------------------------------------------------------------------




{
    "b0o/incline.nvim",
    config = function()
        require("incline").setup()
    end,
    -- Optional: Lazy load Incline
    event = "VeryLazy",
},




-- -----------------------------------------------------------------------------------




return {
    "akinsho/bufferline.nvim",
    event = "VeryLazy",
    keys = {
        { "<leader>bp", "<Cmd>BufferLineTogglePin<CR>", desc = "Toggle pin" },
        { "<leader>p", "<Cmd>BufferLineTogglePin<CR>", desc = "Toggle pin" },
        { "<leader>bx", "<Cmd>BufferLineCloseOthers<CR>", desc = "Delete other buffers" },
        { "<leader>bq", "<Cmd>BufferLineGroupClose ungrouped<CR>", desc = "Delete non-pinned buffers" },
        { "<S-h>", "<cmd>BufferLineCyclePrev<cr>", desc = "Prev Buffer" },
        { "<S-l>", "<cmd>BufferLineCycleNext<cr>", desc = "Next Buffer" },
        { "[b", "<cmd>BufferLineMovePrev<cr>", desc = "Move buffer prev" },
        { "]b", "<cmd>BufferLineMoveNext<cr>", desc = "Move buffer next" },
    },
    opts = {
        options = {
            indicator = { style = "none" },
            buffer_close_icon = "",
            -- hover = {
            --     enabled = true,
            --     delay = 200,
            --     reveal = { "close" },
            -- },
            separator_style = { "", "" },
            always_show_bufferline = false,
            diagnostics = "nvim_lsp",
            -- diagnostics_indicator = function(_, _, diag)
            --     local icons = require("lazyvim.config").icons.diagnostics
            --     local ret = (diag.error and icons.error .. diag.error .. " " or "")
            --         .. (diag.warning and icons.warn .. diag.warning or "")
            --     return vim.trim(ret)
            -- end,
            offsets = {
                {
                    filetype = "neo-tree",
                    text = "Explorer",
                    text_align = "center",
                },
            },
        },
    },
    config = function(_, opts)
        require("bufferline").setup(opts)
        -- Fix bufferline when restoring a session
        vim.api.nvim_create_autocmd({ "BufAdd", "BufDelete" }, {
            callback = function()
                vim.schedule(function()
                    pcall(nvim_bufferline)
                end)
            end,
        })
    end,
}

-------------------------------------------------------------------
-- spectre
-------------------------------------------------------------------
-- {
--     "nvim-pack/nvim-spectre",
--     cmd = "Spectre",
--
--     -- stylua: ignore
--     keys = { { "<leader>sr", function() require("spectre").open() end, desc = "Replace in files (Spectre)", }, },
-- },



-- nvim navic
{
  --   "SmiteshP/nvim-navic",
  --   lazy = true,
  --   init = function()
  --     vim.g.navic_silence = true
  --     require("lazyvim.util").lsp.on_attach(function(client, buffer)
  --       if client.supports_method("textDocument/documentSymbol") then
  --         require("nvim-navic").attach(client, buffer)
  --       end
  --     end)
  --   end,
  --   opts = function()
  --     return {
  --       separator = " 󰁔 ",
  --       highlight = true,
  --       depth_limit = 4,
  --       icons = require("lazyvim.config").icons.kinds,
  --       lazy_update_context = true,
  --     }
  --   end,
  -- },



  ----------------------------------------------------------------------------------------
  -- vim-flog : more visually appealing git log
  ----------------------------------------------------------------------------------------
  {
    "rbong/vim-flog",
    lazy = true,
    cmd = { "Flog", "Flogsplit", "Floggit" },
    dependencies = {
      "tpope/vim-fugitive",
    },
    keys = {
      { "<leader>gl", "<cmd>Flogsplit -all -graph<cr>", desc = "Git log (vim-flog)" },
    },
  },

  ----------------------------------------------------------------------------------------
  -- leap - jumping around with few keystrokes
  ----------------------------------------------------------------------------------------
  {
    "ggandor/leap.nvim",
    enabled = true,
    keys = {
      { "s", mode = { "n", "x", "o" }, desc = "Leap forward to" },
      { "S", mode = { "n", "x", "o" }, desc = "Leap backward to" },
      { "gs", mode = { "n", "x", "o" }, desc = "Leap from windows" },
    },
    config = function()
      local leap = require("leap")
      leap.add_default_mappings(false)
      leap.opts.max_phase_one_targets = nil
      leap.opts.highlight_unlabeled_phase_one_targets = false
    end,
  },
}




    ----------------------------------------------------------------------------------------
    -- cyberdream theme configuration (old config)
    ----------------------------------------------------------------------------------------
    {
        "scottmckendry/cyberdream.nvim",
        lazy = false,
        priority = 1000,
        -- enabled = false,
        config = function()
            -- local util = require("cyberdream.util")
            require("cyberdream").setup({
                -- Recommended - see "Configuring" below for more config options
                transparent = true,
                italic_comments = true,
                hide_fillchars = false,
                borderless_telescope = false,
                terminal_colors = true,
                theme = {
                    -- Override a color entirely
                    colors = {
                        -- For a list of colors see `lua/cyberdream/colours.lua`
                        -- Example:
                        bg = "#000000",
                        fg = "#edf1f5",
                        bgAlt = "#1e2124",
                        bgHighlight = "#3c4048",
                        -- grey = "#7b8496",
                        grey = "#292E3D",
                        blue = "#5ea1ff",
                        green = "#07de88",
                        cyan = "#5ef1ff",
                        red = "#ff5370",
                        yellow = "#F8D68C",
                        -- magenta = "#ff5ef1",
                        magenta = "#bd5eff",
                        -- pink = "#ff5ea0",
                        pink = "#d95289",
                        orange = "#ff9e64",
                        purple = "#bd5eff",
                    },
                    highlights = {
                        -- See `:help highlight-groups` for a list of highlight groupsui
                        -- Complete list can be found in `lua/cyberdream/theme.lua`
                        Comment = { fg = "#60606f", italic = true },
                        boolean = { fg = "#E32283", italic = true },
                        Constant = { fg = "#5e24f0", italic = true },
                        Identifier = { fg = "#bec8d6" },
                        Delimiter = { fg = "#30defc" }, -- for braces , colons and commas....
                        -- Variable = { fg = "" },
                        -- string = { fg = "" },
                        -- Character = { fg = "", },
                        Number = { fg = "#E32283" },
                        Keyword = { fg = "#a252d9", italic = true },
                        -- namespace = { fg = "" },
                        Operator = { fg = "#d95289" },
                        Function = { fg = "#5ea1ff", italic = true },
                        -- Hlargs = { fg = "", },
                        Type = { fg = "#099e93" },
                        LineNr = { fg = "#3d414f" },
                        CursorLineNr = { fg = "#7b8496" },
                        CursorLine = { bg = "" },
                        Title = { bold = true, fg = "#00f0ac" },
                        Visual = { bg = "#2d3345" },
                        -- FloatNormal = { bg = "", fg = "" },
                        FloatBorder = { bg = "", fg = "#50505e" },
                        -- NormalFloat = { bg = "", fg = "" },
                        FloatTitle = { bg = "", fg = "#5ea1ff" },
                        IncSearch = { bg = "#f0f0f0", fg = "#1d202f" },
                        Search = { bg = "#70707f", fg = "#f2f2ff" },
                        MatchParen = { bold = true, fg = "#ff5ea0", bg = "" },
                        Special = { fg = "#30defc" },
                        WinSeparator = { fg = "#50505e", bg = "" },

                        -- LSP & Diagnostics
                        DiagnosticError = { fg = "#ff5370" },
                        DiagnosticWarn = { fg = "#30a0c0" },
                        DiagnosticInfo = { fg = "#5ea1ff" },
                        DiagnosticHint = { fg = "#1abc9c" },
                        DiagnosticUnnecessary = { fg = "#3d414f" },
                        --
                        DiagnosticVirtualTextError = { bg = "", fg = "#ff5370", italic = true },
                        DiagnosticVirtualTextWarn = { bg = "", fg = "#30a0c0", italic = true },
                        DiagnosticVirtualTextInfo = { bg = "", fg = "#0db9d7", italic = true },
                        DiagnosticVirtualTextHint = { bg = "", fg = "#1abc9c", italic = true },
                        --
                        DiagnosticUnderlineError = { undercurl = true, sp = "#ff5370" },
                        DiagnosticUnderlineWarn = { undercurl = true, sp = "#30a0c0" },
                        DiagnosticUnderlineInfo = { undercurl = true, sp = "#0db9d7" },
                        DiagnosticUnderlineHint = { undercurl = true, sp = "#1abc9c" },
                        --
                        LspSignatureActiveParameter = { fg = "" },
                        LspCodeLens = { fg = "" },
                        LspInlayHint = { fg = "#50505e", italic = true },
                        LspInfoBorder = { fg = "#50505e" },
                        LspReferenceText = { bg = "", underline = true },
                        LspReferenceWrite = { bg = "", underline = true },
                        LspReferenceRead = { bg = "", underline = true },

                        -- Telescope
                        TelescopeNormal = { bg = "" },
                        TelescopeBorder = { fg = "#50505e", bg = "" },
                        TelescopePreviewBorder = { fg = "", bg = "" },
                        TelescopePreviewNormal = { bg = "" },
                        TelescopePreviewTitle = { fg = "#5EA1FF", bg = "" },
                        TelescopePromptNormal = { bg = "" },
                        TelescopePromptBorder = { bg = "", fg = "" },
                        TelescopePromptTitle = { bg = "", fg = "#5EA1FF" },
                        TelescopePromptPrefix = { fg = "#5EA1ff", bg = "" },
                        TelescopeResultsBorder = { fg = "", bg = "" },
                        TelescopeResultsNormal = { bg = "" },
                        TelescopeResultsTitle = { fg = "#5EA1ff", bg = "" },

                        -- nvim-cmp completion menu
                        CmpGhostText = { link = "Comment", default = true },
                        CmpNormal = { bg = "#18202b" },
                        BorderBG = { bg = "" },
                        CursorLineSel = { bg = "#4B4F5C" },
                        CmpDocNormal = { bg = "#0C1219" },
                        CmpItemAbbrMatch = { fg = "#5EA1ff", bg = "" },
                        CmpItemAbbrMatchFuzzy = { fg = "#5EA1ff", bg = "" },

                        -- WhichKey
                        WhichKey = { fg = "#5EA1FF" },
                        WhichKeyGroup = { fg = "#5EA1FF" },
                        WhichKeyDesc = { fg = "#d1dbe8" },
                        WhichKeySeperator = { fg = "" },
                        WhichKeyFloat = { bg = "" },
                        WhichKeyValue = { fg = "" },

                        -- GitSigns
                        GitSignsAdd = { fg = "#1abc9c" },
                        GitSignsChange = { fg = "#51A0CF" },
                        GitSignsDelete = { fg = "#ff5370" },

                        -- Indent Blankline / mini indent
                        MiniIndentscopeSymbol = { fg = "#60606b" },
                        -- IblIndent = { fg = "#292E3D" },
                        IblIndent = { fg = "#30defc" },
                        IblScope = { fg = "#30defc" },

                        -- dashboard-nvim
                        DashboardHeader = { fg = "#bd5eff" },
                        DashboardFooter = { fg = "#5ef1ff" },
                        -- dashboard-nvim: doom theme
                        DashboardShortCut = { fg = "" },
                        DashboardDesc = { fg = "#5ea1ff" },
                        DashboardKey = { fg = "#07de88" },
                        DashboardIcon = { fg = "" },

                        -- Noice
                        NoiceFormatProgressDone = { fg = "#1e2124", bg = "#5ef1ff" },
                        NoiceFormatProgressTodo = { fg = "#292e3d", bg = "#0C1219" },
                        NoiceLspProgressClient = { fg = "#5ea1ff" },
                        NoiceLspProgressSpinner = { fg = "#0afa9a" },
                        NoiceLspProgressTitle = { fg = "#5ef1ff" },
                        NoiceCmdlinePopupBorder = { fg = "#50505e" },
                        NoiceCmdlinePopupBorderSearch = { fg = "#50505e" },
                        -- NoiceCmdlinePopup = { fg = "" },

                        -- Nvim Notify
                        -- NotifyDEBUGBody = { fg = "#edf1f5" },
                        -- NotifyDEBUGBorder = { fg = "#50505e" },
                        -- NotifyDEBUGIcon = { fg = "#07DE88" },
                        -- NotifyDEBUGTitle = { fg = "#5ef1ff" },
                        -- NotifyERRORBody = { fg = "#edf1f5" },
                        -- NotifyERRORBorder = { fg = "#50505e" },
                        -- NotifyERRORIcon = { fg = "#07DE88" },
                        -- NotifyERRORTitle = { fg = "#5ef1ff" },
                        -- NotifyINFOBody = { fg = "#edf1f5" },
                        -- NotifyINFOBorder = { fg = "#50505e" },
                        -- NotifyINFOIcon = { fg = "#07DE88" },
                        -- NotifyINFOTitle = { fg = "#5ef1ff" },
                        -- NotifyTRACEBody = { fg = "#edf1f5" },
                        -- NotifyTRACEBorder = { fg = "#50505e" },
                        -- NotifyTRACEIcon = { fg = "#07DE88" },
                        -- NotifyTRACETitle = { fg = "#5ef1ff" },
                        -- NotifyWARNBody = { fg = "#edf1f5" },
                        -- NotifyWARNBorder = { fg = "#50505e" },
                        -- NotifyWARNIcon = { fg = "#07DE88" },
                        -- NotifyWARNTitle = { fg = "#5ef1ff" },
                        -- NotifyBackground = { bg = "" },
                    },
                },
            })
            vim.cmd("colorscheme cyberdream") -- set the colorscheme
        end,
    },

    ----------------------------------------------------------------------------------------
    -- Oil.nvim : File Explorer
    ----------------------------------------------------------------------------------------
    {
        "stevearc/oil.nvim",
        ---@module 'oil'
        ---@type oil.SetupOpts
        keys = {
            { "<leader>o", "<cmd>Oil --float .<cr>", desc = "Oil File Explorer" },
        },
        opts = {
            -- Send deleted files to the trash instead of permanently deleting them (:help oil-trash)
            delete_to_trash = false,
            -- Skip the confirmation popup for simple operations (:help oil.skip_confirm_for_simple_edits)
            skip_confirm_for_simple_edits = true,
            -- Selecting a new/moved/renamed file or directory will prompt you to save changes first
            -- (:help prompt_save_on_select_new_entry)
            prompt_save_on_select_new_entry = false,

            view_options = {
                -- Show files and directories that start with "."
                show_hidden = true,
            },

            keymaps = {
                ["g?"] = { "actions.show_help", mode = "n" },
                ["<CR>"] = "actions.select",
                ["<C-s>"] = { "actions.select", opts = { vertical = true } },
                ["<C-h>"] = { "actions.select", opts = { horizontal = true } },
                ["<C-t>"] = { "actions.select", opts = { tab = true } },
                ["<C-p>"] = "actions.preview",
                ["<C-c>"] = { "actions.close", mode = "n" },
                ["<ESC>"] = { "actions.close", mode = "n" },
                ["<C-e>"] = { "actions.close", mode = "n" },
                ["<C-l>"] = "actions.refresh",
                ["-"] = { "actions.parent", mode = "n" },
                ["_"] = { "actions.open_cwd", mode = "n" },
                ["`"] = { "actions.cd", mode = "n" },
                ["~"] = { "actions.cd", opts = { scope = "tab" }, mode = "n" },
                ["gs"] = { "actions.change_sort", mode = "n" },
                ["gx"] = "actions.open_external",
                ["g."] = { "actions.toggle_hidden", mode = "n" },
                ["H"] = { "actions.toggle_hidden", mode = "n" },
                ["g\\"] = { "actions.toggle_trash", mode = "n" },
                ["gd"] = {
                    desc = "Toggle file detail view",
                    callback = function()
                        detail = not detail
                        if detail then
                            require("oil").set_columns({ "icon", "permissions", "size", "mtime" })
                        else
                            require("oil").set_columns({ "icon" })
                        end
                    end,
                },
            },

            float = {
                -- Padding around the floating window
                padding = 2,
                -- max_width and max_height can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
                max_width = 0.5,
                max_height = 0.85,
                border = "rounded",
                win_options = {
                    winblend = 0,
                },
                -- optionally override the oil buffers window title with custom function: fun(winid: integer): string
                get_win_title = nil,
                -- preview_split: Split direction: "auto", "left", "right", "above", "below".
                preview_split = "auto",
                -- This is the config that will be passed to nvim_open_win.
                -- Change values here to customize the layout
                override = function(conf)
                    return conf
                end,
            },

            preview_win = {
                -- Whether the preview window is automatically updated when the cursor is moved
                update_on_cursor_moved = true,
                -- How to open the preview window "load"|"scratch"|"fast_scratch"
                preview_method = "fast_scratch",
                -- A function that returns true to disable preview on a file e.g. to avoid lag
                disable_preview = function(filename)
                    return false
                end,
                -- Window-local options to use for preview window buffers
                win_options = {},
            },
        },
        -- Optional dependencies
        dependencies = { { "echasnovski/mini.icons", opts = {} } },
        -- dependencies = { "nvim-tree/nvim-web-devicons" }, -- use if you prefer nvim-web-devicons
        -- Lazy loading is not recommended because it is very tricky to make it work correctly in all situations.
        lazy = false,
    },
